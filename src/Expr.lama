-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefs (st, defs) {
  foldl (fun (st, d) {
    case d of
      Fun (name, args, body) -> st.addFunction (name, args, body)
    | Var (names) -> st.addNames (names)
    esac
  }, st, defs)
}

fun addArgs (st, names, vals) {
  case [names, vals] of
    [n:ns, v:vs] -> addArgs (st.addName (n, v), ns, vs)
  | _ -> st
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
      Var (s) -> [c, st.lookup (s)]
    | Ref (s) -> [c, s]
    | Const (i) -> [c, i]
    | Binop (op, l, r) -> (
      var ll = eval (c, l);
      var rr = eval (ll.fst, r);
      [rr.fst, evalOp(op, ll.snd, rr.snd)]
    )
    | Assn (expr1, expr2) ->
        case eval(c, expr1) of
          [c, x] ->
            case eval(c, expr2) of
              [c@[st, w], res] -> 
                case x of 
                  ElemRef(arr, idx) -> [c, arr[idx] := res] 
                | _ -> [[st <- [x, res], w], res]
                esac
            esac
        esac
    | Seq (expr1, expr2) -> 
        case eval(c, expr1) of
          [c, _] -> eval(c, expr2)
        esac
    | Skip -> [c, Void]
    | If (cond, trueExpr, falseExpr) ->
        case eval(c, cond) of
          [c1, false] -> eval(c1, falseExpr)
        | [c1, _] -> eval(c1, trueExpr)
        esac
    | While (cond, body) ->
      evalWhile(c, cond, body)
    | DoWhile (body, cond) -> (
      case eval (c, body) of
        [c, _] -> evalWhile (c, cond, body)
      esac
    )
    | Ignore (e) -> eval(c, e)
    | Scope (defs, expr) -> (
      fun addDefinition(st, def) {
        case def of 
          Fun (name, args, body) -> addFunction(st, name, args, body)
        | Var (names) -> addNames(st, names)
        esac
      }
      var st1 = foldl(addDefinition, enterScope(st), defs);
      case eval([st1, w], expr) of
        [c@[st, w], res] -> [[leaveScope(st), w], res]
      esac 
    )
    | Call (name, exprlist) ->
      case evalList(c, exprlist) of
        [c@[st, w], argVals] ->
          case st.lookup(name) of
            Fun (argNames, body) -> 
              case body of
                External ->
                  case evalBuiltin(name, argVals, w) of
                    [builtinRes, w] -> [[st, w], builtinRes]
                  esac
                | _ ->  (
                  fun addArgs(state, names, vals) {
                      case [names, vals] of
                        [name:names, v:vals] -> addArgs(addName(state, name, v), names, vals)
                      | _ -> state
                      esac
                    }

                  var newSt = addArgs(enterFunction(st), argNames, argVals);
                  case eval([newSt, w], body) of
                    [[newNewSt, w], res] -> [[leaveFunction(st, getGlobal(newNewSt)), w], res]
                  esac
                )
              esac
          esac
      esac

    | String (content) -> [c, content]
    | Array (elems) ->
      case evalList(c, elems) of
        [c, elemVals] ->
          [c, listArray(elemVals)]
      esac
    | Elem (arrE, idxE) ->
      case eval(c, arrE) of
        [c, arr] ->
          case eval(c, idxE) of
            [c, idx] -> 
              case arr of
                Sexp(s, ss) -> [c, ss[idx]]
              | _ -> [c, arr[idx]]
              esac
          esac
      esac
    | ElemRef (arrE, idxE) ->
      case eval(c, arrE) of
        [c, arr] ->
          case eval(c, idxE) of
            [c, idx] ->
              case arr of
                Sexp(s, ss) -> [c, ElemRef(ss, idx)]
              | _ -> [c, ElemRef(arr, idx)]
              esac
          esac
      esac

    | Set (x, e) -> 
      eval(c, Assn(Ref(x), e))
    | Set   (s, e)   -> eval (c, Assn (Ref (s), e))
    | Sexp (s, elemsE) ->
      case evalList(c, elemsE) of 
        [c, elems] -> [c, Sexp(s, listArray(elems))]
      esac
    | a -> failure(string(a))
  esac
}

fun evalWhile(c, cond, body) {
  case eval(c, cond) of
    [c1, false] -> [c1, Void]
  | [c1, _] ->
      case eval(c1, body) of
        [c2, _] -> evalWhile(c2, cond, body)
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
