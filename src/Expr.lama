-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (variable)                  -> st(variable)
  | Const (number)                  -> number
  | Binop (operation, expr1, expr2) -> evalOperation (operation) (evalExpr (st, expr1), evalExpr (st, expr2)) 
  esac
}

public fun evalOperation (operation) {
  case operation of
    "+"  -> infix + 
  | "-"  -> infix - 
  | "*"  -> infix * 
  | "/"  -> infix / 
  | "%"  -> infix % 
  | "==" -> infix ==
  | "!=" -> infix !=
  | "<"  -> infix < 
  | "<=" -> infix <=
  | ">"  -> infix > 
  | ">=" -> infix >=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac
}


