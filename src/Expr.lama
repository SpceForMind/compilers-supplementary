-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Const (number) -> number |
    Var (variable) -> st (variable) |
    Binop (operator, expr1, expr2) -> evalBinop (operator, evalExpr (st, expr1), evalExpr (st, expr2))
  esac
}

public fun evalBinop (operator, expr1, expr2) {
  case operator of
    "+" -> expr1 + expr2 |
    "-" -> expr1 - expr2 |
    "*" -> expr1 * expr2 |
    "/" -> expr1 / expr2 |
    "%" -> expr1 % expr2 |
    "<" -> expr1 < expr2 |
    ">" -> expr1 > expr2 |
    "<=" -> expr1 <= expr2 |
    ">=" -> expr1 >= expr2 |
    "==" -> expr1 == expr2 |
    "!=" -> expr1 != expr2 |
    "&&" -> expr1 && expr2 |
    "!!" -> expr1 !! expr2
  esac
}
