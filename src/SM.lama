-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  case insns of
    {}  -> c
  | insn:p -> case insn of
                ST (variable)     -> case stack of
                                       h : t -> eval ([t, state <- [variable, h], world], p)
                                     esac
              | LD (variable)     -> eval ([state (variable) : stack, state, world], p)
              | CONST (number)    -> eval ([number : stack, state, world], p)
              | BINOP (operation) -> case stack of
                                       y : (x : t) -> eval ([evalOperation (operation) (x, y) : t, state, world], p)
                                     esac
              | READ              -> case readWorld (world) of
                                       [value, newWorld] -> eval ([value : stack, state, newWorld], p)
                                     esac
              | WRITE             -> case stack of
                                       h : t -> eval ([t, state, writeWorld (h, world)], p)
                                     esac
              esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (variable)                  -> {LD (variable)}
  | Const (number)                  -> {CONST (number)}
  | Binop (operation, expr1, expr2) -> compileExpr (expr1) +++ (compileExpr (expr2) +++ {BINOP (operation)})
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Write (expr)          -> compileExpr (expr) +++ {WRITE}
  | Assn (variable, expr) -> compileExpr (expr) +++ {ST (variable)}
  | Skip                  -> {}
  | Read (variable)       -> {READ, ST (variable)}
  | Seq (stmt1, stmt2)    -> compileSM (stmt1) +++ compileSM (stmt2)
  esac
}
